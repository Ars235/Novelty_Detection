# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
		https://colab.research.google.com/drive/1MSI4AxHyqdtADUq6OCnjUS4mx_QQnFQz
"""
import os
import argparse
import torch
import torchvision
import torchvision.transforms as tf
from train import train_model
from model import R_Net, D_Net, R_Loss, D_Loss, Dataset


def main(args):

	torch.manual_seed(0)
	torch.backends.cudnn.deterministic = True
	torch.backends.cudnn.benchmark = False
	
	# Uncomment this if HTTP error happened

	# new_mirror = 'https://ossci-datasets.s3.amazonaws.com/mnist'
	# torchvision.datasets.MNIST.resources = [
	# 	 ('/'.join([new_mirror, url.split('/')[-1]]), md5)
	# 	 for url, md5 in torchvision.datasets.MNIST.resources
	# ]
	
	train_raw_dataset = torchvision.datasets.MNIST(root='./mnist', 
									train=True, 
									download=True,
									transform=tf.Compose([tf.ToTensor(), tf.Normalize((0.1307,), (0.3081,))]))
	
	valid_raw_dataset = torchvision.datasets.MNIST(root='./mnist', 
									train=False, 
									download=True, 
									transform=tf.Compose([tf.ToTensor(), tf.Normalize((0.1307,), (0.3081,))]))
	# Train and validate only on pictures of 4 and 5
	train_dataset = Dataset(train_raw_dataset, [4, 5])
	valid_dataset = Dataset(valid_raw_dataset, [4, 5])
	
	if args.gpu and torch.cuda.is_available():
		device = torch.device('cuda:0')
		print(f'Using GPU {torch.cuda.get_device_name()}')
		print(torch.cuda.get_device_properties(device))
	else:
		device = torch.device('cpu')
		print('Using CPU')
	
	if args.load_path:
		r_net_path = os.path.join(args.load_path, 'r_net.pth')
		d_net_path = os.path.join(args.load_path, 'd_net.pth')
		r_net = torch.load(r_net_path).to(device)
		print(f'Loaded R_Net from {r_net_path}')
		d_net = torch.load(d_net_path).to(device)
		print(f'Loaded D_Net from {d_net_path}')
	else:
		r_net = R_Net(in_channels = 1).to(device)
		d_net = D_Net(in_resolution = (28, 28), in_channels = 1).to(device)
		print('Created models')
	
	scheduler_r_params = {'patience' : 2, 'threshold' : 0.001}
	scheduler_d_params = {'patience' : 2, 'threshold' : 0.001}

	model = train_model(r_net, d_net, train_dataset, valid_dataset, R_Loss, D_Loss, torch.optim.lr_scheduler.ReduceLROnPlateau,
					device=device,batch_size=1024,learning_rate=0.01,scheduler_r_params=scheduler_r_params,
					scheduler_d_params=scheduler_d_params, 
					save_step=5,num_workers=1,save_path=args.save_path)


if __name__ == "__main__":

	parser = argparse.ArgumentParser()
	parser.add_argument('--gpu', action='store_false', help='Turns off gpu training')
	parser.add_argument('--save_path', '-sp', type=str, default='.', help='Path to a folder where metrics and model will be saved')
	parser.add_argument('--load_path', '-lp', default=None, help='Path to a folder from which models will be loaded')
	args = parser.parse_args()

	main(args)